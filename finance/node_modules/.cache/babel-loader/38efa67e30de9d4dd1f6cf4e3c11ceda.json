{"ast":null,"code":"import { isNullOrUndefined, remove, extend } from '@syncfusion/ej2-base';\nimport { RowModelGenerator } from '../services/row-model-generator';\nimport { FreezeRowModelGenerator } from '../services/freeze-row-model-generator';\nimport { RowRenderer } from '../renderer/row-renderer';\nimport * as events from '../base/constant';\nimport { getScrollBarWidth, ensureLastRow, ensureFirstRow, getEditedDataIndex, resetRowIndex, setRowElements } from '../base/util';\n/**\n * Infinite Scrolling class\n */\n\nvar InfiniteScroll =\n/** @class */\nfunction () {\n  /**\n   * Constructor for the Grid infinite scrolling.\n   * @hidden\n   */\n  function InfiniteScroll(parent, serviceLocator) {\n    this.infiniteCache = {};\n    this.infiniteFrozenCache = {};\n    this.isDownScroll = false;\n    this.isUpScroll = false;\n    this.isScroll = true;\n    this.enableContinuousScroll = false;\n    this.initialRender = true;\n    this.isRemove = false;\n    this.isInitialCollapse = false;\n    this.prevScrollTop = 0;\n    this.actions = ['filtering', 'searching', 'grouping', 'ungrouping', 'reorder', 'sorting'];\n    this.keys = ['downArrow', 'upArrow', 'PageUp', 'PageDown'];\n    this.rowTop = 0;\n    this.isInitialMovableRender = true;\n    this.virtualInfiniteData = {};\n    this.isCancel = false;\n    this.emptyRowData = {};\n    this.isNormaledit = false;\n    this.isInfiniteScroll = false;\n    this.isLastPage = false;\n    this.parent = parent;\n    this.serviceLocator = serviceLocator;\n    this.isNormaledit = this.parent.editSettings.mode === 'Normal';\n    this.addEventListener();\n    this.rowModelGenerator = this.parent.getFrozenColumns() ? new FreezeRowModelGenerator(this.parent) : new RowModelGenerator(this.parent);\n  }\n\n  InfiniteScroll.prototype.getModuleName = function () {\n    return 'infiniteScroll';\n  };\n  /**\n   * @hidden\n   */\n\n\n  InfiniteScroll.prototype.addEventListener = function () {\n    this.parent.on(events.dataReady, this.onDataReady, this);\n    this.parent.on(events.dataSourceModified, this.dataSourceModified, this);\n    this.parent.on(events.infinitePageQuery, this.infinitePageQuery, this);\n    this.parent.on(events.infiniteScrollHandler, this.infiniteScrollHandler, this);\n    this.parent.on(events.beforeCellFocused, this.infiniteCellFocus, this);\n    this.parent.on(events.appendInfiniteContent, this.appendInfiniteRows, this);\n    this.parent.on(events.removeInfiniteRows, this.removeInfiniteCacheRows, this);\n    this.parent.on(events.resetInfiniteBlocks, this.resetInfiniteBlocks, this);\n    this.parent.on(events.setInfiniteCache, this.setCache, this);\n    this.parent.on(events.initialCollapse, this.ensureIntialCollapse, this);\n    this.parent.on(events.keyPressed, this.infiniteCellFocus, this);\n    this.parent.on(events.infiniteShowHide, this.setDisplayNone, this);\n    this.parent.on(events.virtualScrollEditActionBegin, this.editActionBegin, this);\n    this.parent.on(events.getVirtualData, this.getVirtualInfiniteData, this);\n    this.parent.on(events.editReset, this.resetInfiniteEdit, this);\n    this.parent.on(events.virtualScrollEditSuccess, this.infiniteEditSuccess, this);\n    this.parent.on(events.refreshVirtualCache, this.refreshInfiniteCache, this);\n    this.parent.on(events.infiniteEditHandler, this.infiniteEditHandler, this);\n    this.parent.on(events.virtualScrollAddActionBegin, this.infiniteAddActionBegin, this);\n    this.parent.on(events.modelChanged, this.modelChanged, this);\n    this.parent.addEventListener(events.actionBegin, this.actionBegin.bind(this));\n    this.parent.addEventListener(events.actionComplete, this.actionComplete.bind(this));\n  };\n  /**\n   * @hidden\n   */\n\n\n  InfiniteScroll.prototype.removeEventListener = function () {\n    if (this.parent.isDestroyed) {\n      return;\n    }\n\n    this.parent.off(events.dataReady, this.onDataReady);\n    this.parent.off(events.dataSourceModified, this.dataSourceModified);\n    this.parent.off(events.infinitePageQuery, this.infinitePageQuery);\n    this.parent.off(events.infiniteScrollHandler, this.infiniteScrollHandler);\n    this.parent.off(events.beforeCellFocused, this.infiniteCellFocus);\n    this.parent.off(events.appendInfiniteContent, this.appendInfiniteRows);\n    this.parent.off(events.removeInfiniteRows, this.removeInfiniteCacheRows);\n    this.parent.off(events.resetInfiniteBlocks, this.resetInfiniteBlocks);\n    this.parent.off(events.setInfiniteCache, this.setCache);\n    this.parent.off(events.initialCollapse, this.ensureIntialCollapse);\n    this.parent.off(events.keyPressed, this.infiniteCellFocus);\n    this.parent.off(events.infiniteShowHide, this.setDisplayNone);\n    this.parent.off(events.virtualScrollEditActionBegin, this.editActionBegin);\n    this.parent.off(events.getVirtualData, this.getVirtualInfiniteData);\n    this.parent.off(events.editReset, this.resetInfiniteEdit);\n    this.parent.off(events.virtualScrollEditSuccess, this.infiniteEditSuccess);\n    this.parent.off(events.refreshVirtualCache, this.refreshInfiniteCache);\n    this.parent.off(events.infiniteEditHandler, this.infiniteEditHandler);\n    this.parent.off(events.virtualScrollAddActionBegin, this.infiniteAddActionBegin);\n    this.parent.off(events.modelChanged, this.modelChanged);\n    this.parent.removeEventListener(events.actionBegin, this.actionBegin.bind(this));\n    this.parent.removeEventListener(events.actionComplete, this.actionComplete.bind(this));\n  };\n\n  InfiniteScroll.prototype.modelChanged = function (args) {\n    if (args.requestType !== 'infiniteScroll' && (args.requestType === 'delete' || this.requestType === 'add')) {\n      var rows = this.parent.getRows();\n      this.firstIndex = parseInt(rows[0].getAttribute('aria-rowindex'), 10);\n      this.firstBlock = Math.ceil((this.firstIndex + 1) / this.parent.pageSettings.pageSize);\n      this.lastIndex = parseInt(rows[rows.length - 1].getAttribute('aria-rowindex'), 10);\n\n      if (args.requestType === 'delete') {\n        var rowObj = this.parent.getRowsObject();\n        args.startIndex = this.parent.infiniteScrollSettings.enableCache ? (this.firstBlock - 1) * this.parent.pageSettings.pageSize : rowObj[rowObj.length - 1].index;\n      } else {\n        args.startIndex = this.firstIndex;\n      }\n\n      if (!this.parent.infiniteScrollSettings.enableCache && this.parent.pageSettings.currentPage === this.maxPage && args.requestType === 'delete') {\n        this.isLastPage = true;\n        this.lastIndex = this.lastIndex - 1;\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.infiniteAddActionBegin = function (args) {\n    if (this.isNormaledit) {\n      this.isAdd = true;\n\n      if (this.parent.infiniteScrollSettings.enableCache) {\n        if (!Object.keys(this.emptyRowData).length) {\n          this.createEmptyRowdata();\n        }\n\n        if (this.parent.pageSettings.currentPage > 1) {\n          args.startEdit = false;\n          this.resetInfiniteBlocks({}, true);\n          this.makeRequest({\n            currentPage: 1\n          });\n        }\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.infiniteEditHandler = function (args) {\n    if (!this.parent.infiniteScrollSettings.enableCache && (args.e.requestType === 'delete' || args.e.requestType === 'save' && this.requestType === 'add')) {\n      var frozenCols = this.parent.getFrozenColumns();\n      var rowElms = this.parent.getRows();\n      var rows = this.parent.getRowsObject();\n\n      if (this.ensureRowAvailability(rows, args.result[0])) {\n        this.resetRowIndex(rows, args.e, rowElms, this.requestType === 'add');\n\n        if (frozenCols) {\n          var rows_1 = this.parent.getMovableRowsObject();\n          this.resetRowIndex(rows_1, args.e, this.parent.getMovableDataRows(), this.requestType === 'add');\n        }\n\n        if (!this.isLastPage) {\n          this.createRow(rows, args);\n        } else {\n          this.isLastPage = false;\n          this.parent.pageSettings.currentPage = this.maxPage;\n\n          if (this.parent.selectionModule.index < this.parent.frozenRows) {\n            remove(rowElms[this.parent.frozenRows - 1]);\n            this.createRow([rows[this.parent.frozenRows - 1]], args, false, true);\n\n            if (frozenCols) {\n              var movableRows = this.parent.getMovableDataRows();\n              remove(movableRows[this.parent.frozenRows]);\n              this.createRow([this.parent.getMovableRowsObject()[this.parent.frozenRows - 1]], args, true, true);\n            }\n\n            setRowElements(this.parent);\n          }\n        }\n      }\n\n      this.parent.hideSpinner();\n      this.requestType === 'delete' ? this.parent.notify(events.deleteComplete, args.e) : this.parent.notify(events.saveComplete, args.e);\n    }\n  };\n\n  InfiniteScroll.prototype.createRow = function (rows, args, isMovable, isFrozenRows) {\n    var row = !isFrozenRows ? this.generateRows(args.result, args.e) : rows;\n    var rowRenderer = new RowRenderer(this.serviceLocator, null, this.parent);\n    var tbody = !this.parent.getFrozenColumns() ? this.parent.getContent().querySelector('tbody') : isMovable ? this.parent.getMovableVirtualContent().querySelector('tbody') : this.parent.getFrozenVirtualContent().querySelector('tbody');\n\n    if (this.parent.frozenRows) {\n      tbody = isFrozenRows && this.requestType !== 'add' || !isFrozenRows && this.requestType === 'add' ? !this.parent.getFrozenColumns() ? this.parent.getHeaderContent().querySelector('tbody') : isMovable ? this.parent.getMovableVirtualHeader().querySelector('tbody') : this.parent.getFrozenVirtualHeader().querySelector('tbody') : tbody;\n    }\n\n    for (var i = row.length - 1; i >= 0; i--) {\n      if (this.requestType === 'delete') {\n        tbody.appendChild(rowRenderer.render(row[i], this.parent.getColumns()));\n      } else {\n        tbody.insertBefore(rowRenderer.render(row[i], this.parent.getColumns()), tbody.firstElementChild);\n      }\n    }\n\n    if (!isFrozenRows && this.parent.frozenRows && (this.parent.selectionModule.index < this.parent.frozenRows || this.requestType === 'add')) {\n      var rowElems = isMovable ? this.parent.getMovableDataRows() : this.parent.getRows();\n      var index = isMovable && this.requestType === 'add' ? this.parent.frozenRows : this.parent.frozenRows - 1;\n      remove(rowElems[index]);\n      this.createRow([rows[this.parent.frozenRows - 1]], args, isMovable, true);\n    }\n\n    if (!this.parent.infiniteScrollSettings.enableCache && !isFrozenRows) {\n      if (!this.parent.getFrozenColumns() || isMovable) {\n        setRowElements(this.parent);\n        this.parent.contentModule.visibleRows = this.requestType === 'add' ? row.concat(rows) : rows.concat(row);\n      } else {\n        this.parent.contentModule.visibleFrozenRows = this.requestType === 'add' ? row.concat(rows) : rows.concat(row);\n        this.createRow(this.parent.getMovableRowsObject(), args, true);\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.ensureRowAvailability = function (rows, data) {\n    var resume = true;\n\n    if (this.parent.frozenRows && !this.parent.infiniteScrollSettings.enableCache && this.parent.sortSettings.columns && this.requestType === 'add') {\n      var key = this.parent.getPrimaryKeyFieldNames()[0];\n\n      for (var i = 0; i < rows.length; i++) {\n        if (rows[i].data[key] === data[key]) {\n          resume = false;\n          break;\n        }\n      }\n    }\n\n    return resume;\n  };\n\n  InfiniteScroll.prototype.generateRows = function (data, args) {\n    return this.rowModelGenerator.generateRows(data, args);\n  };\n\n  InfiniteScroll.prototype.resetRowIndex = function (rows, args, rowElms, isAdd) {\n    var keyField = this.parent.getPrimaryKeyFieldNames()[0];\n    var isRemove = !(rowElms.length % this.parent.pageSettings.pageSize);\n\n    if (isAdd) {\n      if (isRemove) {\n        remove(rowElms[rows.length - 1]);\n        rowElms.splice(rows.length - 1, 1);\n        rows.splice(rows.length - 1, 1);\n      }\n    } else {\n      rows.filter(function (e, index) {\n        if (e.data[keyField] === args.data[0][keyField]) {\n          rows.splice(index, 1);\n          remove(rowElms[index]);\n          rowElms.splice(index, 1);\n        }\n      });\n    }\n\n    var startIndex = isAdd ? 1 : 0;\n    resetRowIndex(this.parent, rows, rowElms, startIndex);\n  };\n\n  InfiniteScroll.prototype.setDisplayNone = function (args) {\n    if (this.parent.infiniteScrollSettings.enableCache) {\n      var frozenCols = this.parent.getFrozenColumns();\n      var keys = frozenCols ? Object.keys(this.infiniteFrozenCache) : Object.keys(this.infiniteCache);\n\n      for (var i = 1; i <= keys.length; i++) {\n        var cache = frozenCols ? args.isFreeze ? this.infiniteFrozenCache[i][0] : this.infiniteFrozenCache[i][1] : this.infiniteCache[i];\n        cache.filter(function (e) {\n          e.cells[args.index].visible = args.visible === '';\n        });\n      }\n\n      this.resetContentModuleCache(frozenCols ? this.infiniteFrozenCache : this.infiniteCache);\n    }\n  };\n\n  InfiniteScroll.prototype.refreshInfiniteCache = function (data) {\n    this.getEditedRowObject().data = data;\n  };\n\n  InfiniteScroll.prototype.getEditedRowObject = function () {\n    var rowObjects = this.parent.getRowsObject();\n    var editedrow;\n\n    for (var i = 0; i < rowObjects.length; i++) {\n      if (rowObjects[i].index === this.editRowIndex) {\n        editedrow = rowObjects[i];\n      }\n    }\n\n    return editedrow;\n  };\n\n  InfiniteScroll.prototype.infiniteEditSuccess = function (args) {\n    if (this.isNormaledit) {\n      if (!this.isAdd && args.data) {\n        this.updateCurrentViewRecords(args.data);\n      }\n\n      this.isAdd = false;\n    }\n  };\n\n  InfiniteScroll.prototype.updateCurrentViewRecords = function (data) {\n    var index = getEditedDataIndex(this.parent, data);\n\n    if (!isNullOrUndefined(index)) {\n      this.parent.getCurrentViewRecords()[index] = data;\n    }\n  };\n\n  InfiniteScroll.prototype.actionBegin = function (args) {\n    if (args.requestType === 'add' || args.requestType === 'delete') {\n      this.requestType = args.requestType;\n    }\n  };\n\n  InfiniteScroll.prototype.actionComplete = function (args) {\n    if (args.requestType === 'delete' || args.requestType === 'save' || args.requestType === 'cancel') {\n      this.requestType = this.empty;\n      this.isCancel = args.requestType === 'cancel' || args.requestType === 'save';\n      this.isAdd = this.isEdit = false;\n\n      if (this.isNormaledit) {\n        this.editRowIndex = this.empty;\n        this.virtualInfiniteData = {};\n        this.parent.editModule.previousVirtualData = {};\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.resetInfiniteEdit = function () {\n    if (this.parent.enableInfiniteScrolling && this.isNormaledit) {\n      if (this.parent.editSettings.allowEditing && this.isEdit || this.parent.editSettings.allowAdding && this.isAdd) {\n        this.parent.isEdit = true;\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.getVirtualInfiniteData = function (data) {\n    data.virtualData = this.virtualInfiniteData;\n    data.isAdd = this.isAdd;\n    data.isCancel = this.isCancel;\n  };\n\n  InfiniteScroll.prototype.editActionBegin = function (e) {\n    this.isEdit = true;\n    this.editRowIndex = e.index;\n    var rowObject = extend({}, this.getEditedRowObject().data);\n    e.data = Object.keys(this.virtualInfiniteData).length ? this.virtualInfiniteData : rowObject;\n  };\n\n  InfiniteScroll.prototype.dataSourceModified = function () {\n    this.resetInfiniteBlocks({\n      requestType: this.empty\n    }, true);\n  };\n\n  InfiniteScroll.prototype.onDataReady = function (e) {\n    if (!isNullOrUndefined(e.count)) {\n      this.maxPage = Math.ceil(e.count / this.parent.pageSettings.pageSize);\n    }\n  };\n\n  InfiniteScroll.prototype.ensureIntialCollapse = function (isExpand) {\n    this.isInitialCollapse = !isExpand;\n  };\n\n  InfiniteScroll.prototype.infiniteScrollHandler = function (e) {\n    var _this = this;\n\n    this.restoreInfiniteEdit();\n    this.restoreInfiniteAdd();\n    var targetEle = e.target;\n    var isInfinite = targetEle.classList.contains('e-content') || targetEle.classList.contains('e-movablecontent');\n\n    if (isInfinite && this.parent.enableInfiniteScrolling) {\n      var scrollEle = this.parent.getFrozenColumns() ? this.parent.getMovableVirtualContent() : this.parent.getContent().firstElementChild;\n      this.prevScrollTop = scrollEle.scrollTop;\n      var rows = this.parent.getRows();\n      var index = parseInt(rows[rows.length - 1].getAttribute('aria-rowindex'), 10) + 1;\n      var prevPage = this.parent.pageSettings.currentPage;\n      var args = void 0;\n      var offset = targetEle.scrollHeight - targetEle.scrollTop;\n      var round = Math.round(targetEle.scrollHeight - targetEle.scrollTop);\n      var floor = offset < targetEle.clientHeight ? Math.ceil(offset) : Math.floor(offset);\n      var isBottom = floor === targetEle.clientHeight || round === targetEle.clientHeight;\n\n      if (this.isScroll && isBottom && (this.parent.pageSettings.currentPage <= this.maxPage - 1 || this.enableContinuousScroll)) {\n        if (this.parent.infiniteScrollSettings.enableCache) {\n          this.isUpScroll = false;\n          this.isDownScroll = true;\n          setTimeout(function () {\n            _this.isScroll = true;\n          }, 600);\n        }\n\n        var rows_2 = [].slice.call(scrollEle.querySelectorAll('.e-row:not(.e-addedrow)'));\n        var row = rows_2[rows_2.length - 1];\n        var rowIndex = parseInt(row.getAttribute('aria-rowindex'), 10);\n        this.parent.pageSettings.currentPage = Math.ceil(rowIndex / this.parent.pageSettings.pageSize) + 1;\n        args = {\n          requestType: 'infiniteScroll',\n          currentPage: this.parent.pageSettings.currentPage,\n          prevPage: prevPage,\n          startIndex: index,\n          direction: 'down'\n        };\n        this.makeRequest(args);\n      }\n\n      if (this.isScroll && this.parent.infiniteScrollSettings.enableCache && targetEle.scrollTop === 0 && this.parent.pageSettings.currentPage !== 1) {\n        if (this.parent.infiniteScrollSettings.enableCache) {\n          this.isDownScroll = false;\n          this.isUpScroll = true;\n          setTimeout(function () {\n            _this.isScroll = true;\n          }, 600);\n        }\n\n        var row = [].slice.call(scrollEle.querySelectorAll('.e-row'));\n        var rowIndex = parseInt(row[this.parent.pageSettings.pageSize - 1].getAttribute('aria-rowindex'), 10);\n        var startIndex = parseInt(row[0].getAttribute('aria-rowindex'), 10) - this.parent.pageSettings.pageSize;\n        this.parent.pageSettings.currentPage = Math.ceil(rowIndex / this.parent.pageSettings.pageSize) - 1;\n\n        if (this.parent.pageSettings.currentPage) {\n          args = {\n            requestType: 'infiniteScroll',\n            currentPage: this.parent.pageSettings.currentPage,\n            prevPage: prevPage,\n            startIndex: startIndex,\n            direction: 'up'\n          };\n          this.makeRequest(args);\n        }\n      }\n\n      if (this.parent.infiniteScrollSettings.enableCache && !this.isScroll && isNullOrUndefined(args)) {\n        if (this.isDownScroll || this.isUpScroll) {\n          scrollEle.scrollTop = this.top;\n        }\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.makeRequest = function (args) {\n    var _this = this;\n\n    if (this.parent.pageSettings.currentPage !== args.prevPage) {\n      if (this.parent.pageSettings.currentPage <= this.maxPage) {\n        this.isInfiniteScroll = true;\n\n        if (isNullOrUndefined(this.infiniteCache[args.currentPage])) {\n          setTimeout(function () {\n            _this.getVirtualInfiniteEditedData();\n\n            _this.parent.notify('model-changed', args);\n          }, 100);\n        } else {\n          setTimeout(function () {\n            _this.getVirtualInfiniteEditedData();\n\n            _this.parent.notify(events.refreshInfiniteModeBlocks, args);\n          }, 100);\n        }\n      } else {\n        this.parent.pageSettings.currentPage = this.maxPage;\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.infinitePageQuery = function (query) {\n    if (this.initialRender) {\n      this.initialRender = false;\n      this.intialPageQuery(query);\n    } else {\n      if (!this.isInfiniteScroll && (this.requestType === 'delete' || this.requestType === 'add')) {\n        this.editPageQuery(query);\n      } else {\n        query.page(this.parent.pageSettings.currentPage, this.parent.pageSettings.pageSize);\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.editPageQuery = function (query) {\n    var initialBlocks = this.parent.infiniteScrollSettings.initialBlocks;\n    var isCache = this.parent.infiniteScrollSettings.enableCache;\n\n    if (isCache) {\n      this.infiniteCache = {};\n      this.infiniteFrozenCache = {};\n      query.skip(this.firstIndex);\n      query.take(initialBlocks * this.parent.pageSettings.pageSize);\n    } else {\n      if (this.parent.editSettings.mode === 'Dialog') {\n        this.parent.clearSelection();\n      }\n\n      var index = this.requestType === 'delete' ? this.lastIndex : this.firstIndex;\n      query.skip(index);\n      query.take(1);\n    }\n  };\n\n  InfiniteScroll.prototype.intialPageQuery = function (query) {\n    if (this.parent.infiniteScrollSettings.enableCache && this.parent.infiniteScrollSettings.initialBlocks > this.parent.infiniteScrollSettings.maxBlocks) {\n      this.parent.infiniteScrollSettings.initialBlocks = this.parent.infiniteScrollSettings.maxBlocks;\n    }\n\n    var pageSize = this.parent.pageSettings.pageSize * this.parent.infiniteScrollSettings.initialBlocks;\n    query.page(1, pageSize);\n  };\n\n  InfiniteScroll.prototype.infiniteCellFocus = function (e) {\n    if (e.byKey && (e.keyArgs.action === 'upArrow' || e.keyArgs.action === 'downArrow')) {\n      this.pressedKey = e.keyArgs.action;\n      var ele = document.activeElement;\n      var rowIndex = parseInt(ele.parentElement.getAttribute('aria-rowindex'), 10);\n      var scrollEle = this.parent.getContent().firstElementChild;\n      this.rowIndex = e.keyArgs.action === 'downArrow' ? rowIndex + 1 : rowIndex - 1;\n      this.cellIndex = parseInt(ele.getAttribute('aria-colindex'), 10);\n      var row = this.parent.getRowByIndex(rowIndex);\n      var visibleRowCount = Math.floor(scrollEle.offsetHeight / this.parent.getRowHeight());\n\n      if (!row || ensureLastRow(row, this.parent) || ensureFirstRow(row, this.rowTop)) {\n        var height = row ? row.getBoundingClientRect().height : this.parent.getRowHeight();\n\n        if (!this.parent.infiniteScrollSettings.enableCache) {\n          if (e.keyArgs.action === 'downArrow' && (ensureLastRow(row, this.parent) || !row)) {\n            var nTop = (this.rowIndex - visibleRowCount) * height;\n            var oTop = scrollEle.scrollTop + this.parent.getRowHeight();\n            scrollEle.scrollTop = nTop < oTop ? oTop : nTop;\n          }\n\n          if (e.keyArgs.action === 'upArrow' && ensureFirstRow(row, this.rowTop)) {\n            scrollEle.scrollTop = this.rowIndex * height;\n          }\n        }\n      } else {\n        this.pressedKey = this.empty;\n      }\n    } else if (e.key === 'PageDown' || e.key === 'PageUp') {\n      this.pressedKey = e.key;\n    }\n  };\n\n  InfiniteScroll.prototype.createEmptyRowdata = function () {\n    var _this = this;\n\n    this.parent.getColumns().filter(function (e) {\n      _this.emptyRowData[e.field] = _this.empty;\n    });\n  };\n\n  InfiniteScroll.prototype.getVirtualInfiniteEditedData = function () {\n    var editForm = this.parent.element.querySelector('.e-editedrow');\n    var addForm = this.parent.element.querySelector('.e-addedrow');\n    var gridForm = this.parent.element.querySelector('.e-gridform');\n\n    if (this.parent.infiniteScrollSettings.enableCache && (editForm || addForm)) {\n      var rowData = editForm ? extend({}, this.getEditedRowObject().data) : extend({}, this.emptyRowData);\n      this.virtualInfiniteData = this.parent.editModule.getCurrentEditedData(gridForm, rowData);\n\n      if (this.parent.getFrozenColumns()) {\n        this.virtualInfiniteData = this.parent.editModule.getCurrentEditedData(this.parent.getMovableVirtualContent().querySelector('.e-gridform'), rowData);\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.restoreInfiniteEdit = function () {\n    var content = this.parent.getFrozenColumns() ? this.parent.getMovableVirtualContent() : this.parent.getContent().firstElementChild;\n    var frozenEdit = this.parent.frozenRows ? this.editRowIndex >= this.parent.frozenRows : true;\n\n    if (this.isNormaledit && this.parent.infiniteScrollSettings.enableCache && frozenEdit) {\n      if (this.parent.editSettings.allowEditing && !isNullOrUndefined(this.editRowIndex)) {\n        var row = this.parent.getRowByIndex(this.editRowIndex);\n\n        if (Object.keys(this.virtualInfiniteData).length && row && !this.parent.getContent().querySelector('.e-editedrow')) {\n          var top_1 = row.getBoundingClientRect().top;\n\n          if (top_1 < content.offsetHeight && top_1 > this.parent.getRowHeight()) {\n            this.parent.isEdit = false;\n            this.parent.editModule.startEdit(row);\n          }\n        }\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.restoreInfiniteAdd = function () {\n    var content = this.parent.getFrozenColumns() ? this.parent.getMovableVirtualContent() : this.parent.getContent().firstElementChild;\n\n    if (this.parent.getRowByIndex(0) && this.isNormaledit && this.parent.infiniteScrollSettings.enableCache && this.isAdd && !content.querySelector('.e-addedrow')) {\n      var isTop = content.scrollTop < this.parent.getRowHeight();\n\n      if (isTop) {\n        this.parent.isEdit = false;\n        this.parent.addRecord();\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.appendInfiniteRows = function (e) {\n    var target = document.activeElement;\n    var frozenCols = this.parent.getFrozenColumns();\n    var scrollEle = frozenCols ? this.parent.getMovableVirtualContent() : this.parent.getContent().firstElementChild;\n    var isInfiniteScroll = this.parent.enableInfiniteScrolling && e.args.requestType === 'infiniteScroll';\n\n    if (isInfiniteScroll && !e.args.isFrozen || !isInfiniteScroll) {\n      if (isInfiniteScroll && e.args.direction === 'up') {\n        e.tbody.insertBefore(e.frag, e.tbody.firstElementChild);\n      } else {\n        e.tbody.appendChild(e.frag);\n      }\n    }\n\n    if (!frozenCols) {\n      this.parent.contentModule.getTable().appendChild(e.tbody);\n    } else {\n      if (isInfiniteScroll) {\n        if (e.args.isFrozen) {\n          this.frozenFrag = e.frag;\n        } else {\n          var tbody = this.parent.getFrozenVirtualContent().querySelector('tbody');\n          e.args.direction === 'up' ? tbody.insertBefore(this.frozenFrag, tbody.firstElementChild) : tbody.appendChild(this.frozenFrag);\n          this.parent.getMovableVirtualContent().querySelector('.e-table').appendChild(e.tbody);\n        }\n      } else {\n        var table = e.args.isFrozen ? this.parent.getFrozenVirtualContent().querySelector('.e-table') : this.parent.getMovableVirtualContent().querySelector('.e-table');\n        table.appendChild(e.tbody);\n      }\n    }\n\n    if (!e.args.isFrozen) {\n      this.rowTop = !this.rowTop ? this.parent.getRows()[0].getBoundingClientRect().top : this.rowTop;\n\n      if (isInfiniteScroll) {\n        if (this.parent.infiniteScrollSettings.enableCache && this.isRemove) {\n          scrollEle.scrollTop = this.top;\n\n          if (frozenCols) {\n            this.parent.getFrozenVirtualContent().scrollTop = this.top;\n          }\n        }\n\n        setRowElements(this.parent);\n        this.selectNewRow(e.tbody, e.args.startIndex);\n        this.pressedKey = undefined;\n      }\n\n      this.restoreInfiniteAdd();\n    }\n\n    this.isInfiniteScroll = false;\n  };\n\n  InfiniteScroll.prototype.setRowElements = function () {\n    if (this.parent.getFrozenColumns()) {\n      this.parent.contentModule.rowElements = [].slice.call(this.parent.element.querySelectorAll('.e-movableheader .e-row, .e-movablecontent .e-row'));\n      this.parent.contentModule.freezeRowElements = [].slice.call(this.parent.element.querySelectorAll('.e-frozenheader .e-row, .e-frozencontent .e-row'));\n    } else {\n      this.parent.contentModule.rowElements = [].slice.call(this.parent.element.querySelectorAll('.e-row:not(.e-addedrow)'));\n    }\n  };\n\n  InfiniteScroll.prototype.selectNewRow = function (tbody, startIndex) {\n    var _this = this;\n\n    var row = this.parent.getRowByIndex(this.rowIndex);\n\n    if (this.keys.some(function (value) {\n      return value === _this.pressedKey;\n    })) {\n      if (this.pressedKey === 'downArrow' || this.parent.infiniteScrollSettings.enableCache && this.pressedKey === 'upArrow') {\n        setTimeout(function () {\n          // tslint:disable-next-line:no-any\n          var target = row.cells[0];\n          target.focus({\n            preventScroll: true\n          });\n\n          _this.parent.selectRow(_this.rowIndex);\n\n          _this.parent.getContent().firstElementChild.scrollTop += _this.parent.getRowHeight();\n        }, 0);\n      }\n\n      if (this.pressedKey === 'PageDown') {\n        var row_1 = this.parent.getRowByIndex(startIndex);\n\n        if (row_1) {\n          row_1.cells[0].focus();\n        }\n      }\n\n      if (this.pressedKey === 'PageUp') {\n        tbody.querySelector('.e-row').cells[0].focus();\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.removeInfiniteCacheRows = function (e) {\n    var isInfiniteScroll = this.parent.enableInfiniteScrolling && e.args.requestType === 'infiniteScroll';\n\n    if (!e.args.isFrozen && isInfiniteScroll && this.parent.infiniteScrollSettings.enableCache && this.isRemove) {\n      var rows = [].slice.call(this.parent.getContentTable().querySelectorAll('.e-row'));\n\n      if (e.args.direction === 'down') {\n        if (this.parent.allowGrouping && this.parent.groupSettings.columns.length) {\n          var captionRows = [].slice.call(this.parent.getContentTable().querySelectorAll('tr'));\n          this.removeCaptionRows(captionRows, e.args);\n        }\n\n        var addRowCount = this.parent.element.querySelector('.e-addedrow') ? 0 : 1;\n        this.removeTopRows(rows, this.parent.pageSettings.pageSize - addRowCount);\n      }\n\n      if (e.args.direction === 'up') {\n        if (this.parent.allowGrouping && this.parent.groupSettings.columns.length) {\n          var captionRows = [].slice.call(this.parent.getContentTable().querySelectorAll('tr'));\n          this.removeCaptionRows(captionRows, e.args);\n        } else {\n          this.removeBottomRows(rows, rows.length - 1, e.args);\n        }\n      }\n\n      this.isScroll = false;\n      this.top = this.calculateScrollTop(e.args);\n    }\n  };\n\n  InfiniteScroll.prototype.calculateScrollTop = function (args) {\n    var top = 0;\n    var scrollCnt = this.parent.getFrozenColumns() ? this.parent.getMovableVirtualContent() : this.parent.getContent().firstElementChild;\n\n    if (args.direction === 'down') {\n      if (this.parent.allowGrouping && this.parent.groupSettings.columns.length && !this.isInitialCollapse) {\n        top = this.captionRowHeight();\n      }\n\n      var captionRows = [].slice.call(this.parent.getContent().firstElementChild.querySelectorAll('tr:not(.e-row)'));\n      var captionCount = 0;\n\n      if (this.isInitialCollapse && !isNullOrUndefined(captionRows)) {\n        captionCount = Math.round((captionRows.length - 1) / this.parent.groupSettings.columns.length);\n      }\n\n      var value = captionCount ? captionCount : this.parent.pageSettings.pageSize * (this.parent.infiniteScrollSettings.maxBlocks - 1);\n      var currentViewRowCount = 0;\n      var i = 0;\n\n      while (currentViewRowCount < scrollCnt.clientHeight) {\n        i++;\n        currentViewRowCount = i * this.parent.getRowHeight();\n      }\n\n      i = i - 1;\n      top += (value - i) * this.parent.getRowHeight();\n    }\n\n    if (args.direction === 'up') {\n      if (this.parent.allowGrouping && this.parent.groupSettings.columns.length && !this.isInitialCollapse) {\n        top = this.infiniteCache[this.parent.pageSettings.currentPage].length * this.parent.getRowHeight();\n      } else if (this.isInitialCollapse) {\n        var groupedData = this.infiniteCache[this.parent.pageSettings.currentPage];\n        var count = 0;\n\n        for (var i = 0; i < groupedData.length; i++) {\n          if (groupedData[i].isCaptionRow) {\n            count++;\n          }\n        }\n\n        top += Math.round(count / this.parent.groupSettings.columns.length) * this.parent.getRowHeight();\n      } else {\n        top += this.parent.pageSettings.pageSize * this.parent.getRowHeight() + getScrollBarWidth();\n      }\n    }\n\n    return top;\n  };\n\n  InfiniteScroll.prototype.captionRowHeight = function () {\n    var rows = [].slice.call(this.parent.getContent().querySelectorAll('tr:not(.e-row)'));\n    return rows.length * this.parent.getRowHeight();\n  };\n\n  InfiniteScroll.prototype.removeTopRows = function (rows, maxIndx) {\n    var frozeCols = this.parent.getFrozenColumns();\n    var movableRows = frozeCols ? [].slice.call(this.parent.getMovableVirtualContent().querySelectorAll('.e-row')) : null;\n\n    for (var i = 0; i <= maxIndx; i++) {\n      if (this.parent.frozenRows && this.parent.pageSettings.currentPage === this.parent.infiniteScrollSettings.maxBlocks + 1 && i > maxIndx - this.parent.frozenRows) {\n        continue;\n      }\n\n      remove(rows[i]);\n\n      if (movableRows) {\n        remove(movableRows[i]);\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.removeBottomRows = function (rows, maxIndx, args) {\n    var cnt = 0;\n    var frozeCols = this.parent.getFrozenColumns();\n    var movableRows = frozeCols ? [].slice.call(this.parent.getMovableVirtualContent().querySelectorAll('.e-row')) : null;\n    var pageSize = this.parent.pageSettings.pageSize;\n\n    if (!frozeCols && this.infiniteCache[args.prevPage].length < pageSize) {\n      cnt = this.parent.pageSettings.pageSize - this.infiniteCache[args.prevPage].length;\n    }\n\n    if (frozeCols && this.infiniteFrozenCache[args.prevPage][1].length < pageSize) {\n      cnt = this.parent.pageSettings.pageSize - this.infiniteFrozenCache[args.prevPage][1].length;\n    }\n\n    for (var i = maxIndx; cnt < pageSize; i--) {\n      cnt++;\n      remove(rows[i]);\n\n      if (movableRows) {\n        remove(movableRows[i]);\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.removeCaptionRows = function (rows, args) {\n    if (args.direction === 'down') {\n      var lastRow = this.parent.getRows()[this.parent.pageSettings.pageSize];\n      var lastRowIndex = parseInt(lastRow.getAttribute('aria-rowindex'), 10) - 1;\n      var k = 0;\n\n      for (var i = 0; k < lastRowIndex; i++) {\n        if (!rows[i].classList.contains('e-row')) {\n          remove(rows[i]);\n        } else {\n          k = parseInt(rows[i].getAttribute('aria-rowindex'), 10);\n        }\n      }\n    }\n\n    if (args.direction === 'up') {\n      var rowElements = [].slice.call(this.parent.getContent().querySelectorAll('.e-row'));\n      var lastIndex = parseInt(rowElements[rowElements.length - 1].getAttribute('aria-rowindex'), 10);\n      var page = Math.ceil(lastIndex / this.parent.pageSettings.pageSize);\n      var startIndex = 0;\n\n      for (var i = this.parent.pageSettings.currentPage + 1; i < page; i++) {\n        startIndex += this.infiniteCache[i].length;\n      }\n\n      for (var i = startIndex; i < rows.length; i++) {\n        remove(rows[i]);\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.resetInfiniteBlocks = function (args, isDataModified) {\n    var isInfiniteScroll = this.parent.enableInfiniteScrolling && args.requestType !== 'infiniteScroll';\n\n    if (!this.initialRender && !isNullOrUndefined(this.parent.infiniteScrollModule) && isInfiniteScroll) {\n      if (this.actions.some(function (value) {\n        return value === args.requestType;\n      }) || isDataModified) {\n        var scrollEle = this.parent.getFrozenColumns() ? this.parent.getMovableVirtualContent() : this.parent.getContent().firstElementChild;\n        this.initialRender = true;\n        scrollEle.scrollTop = 0;\n        this.parent.pageSettings.currentPage = 1;\n        this.infiniteCache = this.infiniteFrozenCache = {};\n        this.resetContentModuleCache({});\n        this.isRemove = false;\n        this.top = 0;\n        this.isInitialMovableRender = true;\n        this.isInitialCollapse = false;\n        this.parent.contentModule.isRemove = this.isRemove;\n        this.parent.contentModule.isAddRows = this.isRemove;\n        this.parent.contentModule.visibleRows = [];\n        this.parent.contentModule.visibleFrozenRows = [];\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.setCache = function (e) {\n    if (this.parent.enableInfiniteScrolling && this.parent.infiniteScrollSettings.enableCache) {\n      var frozeCols = this.parent.getFrozenColumns();\n      var idx = e.args.isFrozen ? 1 : 0;\n      var isEdit = e.args.requestType !== 'infiniteScroll' && (this.requestType === 'delete' || this.requestType === 'add');\n      var currentPage = this.parent.pageSettings.currentPage;\n\n      if (frozeCols && this.isInitialMovableRender || !frozeCols && !Object.keys(this.infiniteCache).length || isEdit) {\n        this.isInitialMovableRender = !e.args.isFrozen;\n        this.setInitialCache(e.modelData, e.args, isEdit);\n      }\n\n      if (!frozeCols && isNullOrUndefined(this.infiniteCache[this.parent.pageSettings.currentPage])) {\n        this.infiniteCache[this.parent.pageSettings.currentPage] = e.modelData;\n        this.resetContentModuleCache(this.infiniteCache);\n      }\n\n      if (frozeCols) {\n        if (idx === 0 && isNullOrUndefined(this.infiniteFrozenCache[currentPage]) || !this.infiniteFrozenCache[currentPage][idx].length) {\n          this.createFrozenCache(currentPage);\n          this.infiniteFrozenCache[currentPage][idx] = e.modelData;\n\n          if (idx === 1) {\n            this.resetContentModuleCache(this.infiniteFrozenCache);\n          }\n        }\n      }\n\n      if (e.isInfiniteScroll && !this.isRemove) {\n        this.isRemove = (currentPage - 1) % this.parent.infiniteScrollSettings.maxBlocks === 0;\n        this.parent.contentModule.isRemove = this.isRemove;\n      }\n    }\n  };\n\n  InfiniteScroll.prototype.setInitialCache = function (data, args, isEdit) {\n    var frozenCols = this.parent.getFrozenColumns();\n    var idx = args.isFrozen ? 1 : 0;\n    var k = !isEdit ? 1 : this.firstBlock;\n\n    for (var i = 1; i <= this.parent.infiniteScrollSettings.initialBlocks; i++) {\n      var startIndex = (i - 1) * this.parent.pageSettings.pageSize;\n      var endIndex = i * this.parent.pageSettings.pageSize;\n\n      if (this.parent.allowGrouping && this.parent.groupSettings.columns.length) {\n        this.setInitialGroupCache(data, k, startIndex, endIndex);\n      } else {\n        if (frozenCols) {\n          this.createFrozenCache(k);\n          this.infiniteFrozenCache[k][idx] = data.slice(startIndex, endIndex);\n          this.resetContentModuleCache(this.infiniteFrozenCache);\n        } else {\n          this.infiniteCache[k] = data.slice(startIndex, endIndex);\n          this.resetContentModuleCache(this.infiniteCache);\n        }\n      }\n\n      k++;\n    }\n  };\n\n  InfiniteScroll.prototype.createFrozenCache = function (index) {\n    if (!this.infiniteFrozenCache[index]) {\n      this.infiniteFrozenCache[index] = [[], []];\n    }\n  };\n\n  InfiniteScroll.prototype.setInitialGroupCache = function (data, index, sIndex, eIndex) {\n    var pageData = [];\n    var startIndex = 0;\n\n    for (var i = 1; i <= Object.keys(this.infiniteCache).length; i++) {\n      startIndex += this.infiniteCache[i].length;\n    }\n\n    var k = sIndex;\n\n    for (var i = startIndex; i < data.length && k < eIndex; i++) {\n      if (data[i].index < eIndex || data[i].isCaptionRow) {\n        k = data[i].isCaptionRow ? k : data[i].index;\n        pageData.push(data[i]);\n      }\n\n      if (data[i].index >= eIndex || data[i].index === eIndex - 1) {\n        break;\n      }\n    }\n\n    this.infiniteCache[index] = pageData;\n    this.resetContentModuleCache(this.infiniteCache);\n  };\n\n  InfiniteScroll.prototype.resetContentModuleCache = function (data) {\n    this.parent.contentModule.infiniteCache = data;\n  };\n  /**\n   * @hidden\n   */\n\n\n  InfiniteScroll.prototype.destroy = function () {\n    this.removeEventListener();\n  };\n\n  return InfiniteScroll;\n}();\n\nexport { InfiniteScroll };","map":{"version":3,"sources":["D:/Projects/TCC/Finances/qub29a--run/node_modules/@syncfusion/ej2-grids/src/grid/actions/infinite-scroll.js"],"names":["isNullOrUndefined","remove","extend","RowModelGenerator","FreezeRowModelGenerator","RowRenderer","events","getScrollBarWidth","ensureLastRow","ensureFirstRow","getEditedDataIndex","resetRowIndex","setRowElements","InfiniteScroll","parent","serviceLocator","infiniteCache","infiniteFrozenCache","isDownScroll","isUpScroll","isScroll","enableContinuousScroll","initialRender","isRemove","isInitialCollapse","prevScrollTop","actions","keys","rowTop","isInitialMovableRender","virtualInfiniteData","isCancel","emptyRowData","isNormaledit","isInfiniteScroll","isLastPage","editSettings","mode","addEventListener","rowModelGenerator","getFrozenColumns","prototype","getModuleName","on","dataReady","onDataReady","dataSourceModified","infinitePageQuery","infiniteScrollHandler","beforeCellFocused","infiniteCellFocus","appendInfiniteContent","appendInfiniteRows","removeInfiniteRows","removeInfiniteCacheRows","resetInfiniteBlocks","setInfiniteCache","setCache","initialCollapse","ensureIntialCollapse","keyPressed","infiniteShowHide","setDisplayNone","virtualScrollEditActionBegin","editActionBegin","getVirtualData","getVirtualInfiniteData","editReset","resetInfiniteEdit","virtualScrollEditSuccess","infiniteEditSuccess","refreshVirtualCache","refreshInfiniteCache","infiniteEditHandler","virtualScrollAddActionBegin","infiniteAddActionBegin","modelChanged","actionBegin","bind","actionComplete","removeEventListener","isDestroyed","off","args","requestType","rows","getRows","firstIndex","parseInt","getAttribute","firstBlock","Math","ceil","pageSettings","pageSize","lastIndex","length","rowObj","getRowsObject","startIndex","infiniteScrollSettings","enableCache","index","currentPage","maxPage","isAdd","Object","createEmptyRowdata","startEdit","makeRequest","e","frozenCols","rowElms","ensureRowAvailability","result","rows_1","getMovableRowsObject","getMovableDataRows","createRow","selectionModule","frozenRows","movableRows","hideSpinner","notify","deleteComplete","saveComplete","isMovable","isFrozenRows","row","generateRows","rowRenderer","tbody","getContent","querySelector","getMovableVirtualContent","getFrozenVirtualContent","getHeaderContent","getMovableVirtualHeader","getFrozenVirtualHeader","i","appendChild","render","getColumns","insertBefore","firstElementChild","rowElems","contentModule","visibleRows","concat","visibleFrozenRows","data","resume","sortSettings","columns","key","getPrimaryKeyFieldNames","keyField","splice","filter","cache","isFreeze","cells","visible","resetContentModuleCache","getEditedRowObject","rowObjects","editedrow","editRowIndex","updateCurrentViewRecords","getCurrentViewRecords","empty","isEdit","editModule","previousVirtualData","enableInfiniteScrolling","allowEditing","allowAdding","virtualData","rowObject","count","isExpand","_this","restoreInfiniteEdit","restoreInfiniteAdd","targetEle","target","isInfinite","classList","contains","scrollEle","scrollTop","prevPage","offset","scrollHeight","round","floor","clientHeight","isBottom","setTimeout","rows_2","slice","call","querySelectorAll","rowIndex","direction","top","getVirtualInfiniteEditedData","refreshInfiniteModeBlocks","query","intialPageQuery","editPageQuery","page","initialBlocks","isCache","skip","take","clearSelection","maxBlocks","byKey","keyArgs","action","pressedKey","ele","document","activeElement","parentElement","cellIndex","getRowByIndex","visibleRowCount","offsetHeight","getRowHeight","height","getBoundingClientRect","nTop","oTop","field","editForm","element","addForm","gridForm","rowData","getCurrentEditedData","content","frozenEdit","top_1","isTop","addRecord","isFrozen","frag","getTable","frozenFrag","table","selectNewRow","undefined","rowElements","freezeRowElements","some","value","focus","preventScroll","selectRow","row_1","getContentTable","allowGrouping","groupSettings","captionRows","removeCaptionRows","addRowCount","removeTopRows","removeBottomRows","calculateScrollTop","scrollCnt","captionRowHeight","captionCount","currentViewRowCount","groupedData","isCaptionRow","maxIndx","frozeCols","cnt","lastRow","lastRowIndex","k","isDataModified","infiniteScrollModule","isAddRows","idx","setInitialCache","modelData","createFrozenCache","endIndex","setInitialGroupCache","sIndex","eIndex","pageData","push","destroy"],"mappings":"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","sourcesContent":["import { isNullOrUndefined, remove, extend } from '@syncfusion/ej2-base';\nimport { RowModelGenerator } from '../services/row-model-generator';\nimport { FreezeRowModelGenerator } from '../services/freeze-row-model-generator';\nimport { RowRenderer } from '../renderer/row-renderer';\nimport * as events from '../base/constant';\nimport { getScrollBarWidth, ensureLastRow, ensureFirstRow, getEditedDataIndex, resetRowIndex, setRowElements } from '../base/util';\n/**\n * Infinite Scrolling class\n */\nvar InfiniteScroll = /** @class */ (function () {\n    /**\n     * Constructor for the Grid infinite scrolling.\n     * @hidden\n     */\n    function InfiniteScroll(parent, serviceLocator) {\n        this.infiniteCache = {};\n        this.infiniteFrozenCache = {};\n        this.isDownScroll = false;\n        this.isUpScroll = false;\n        this.isScroll = true;\n        this.enableContinuousScroll = false;\n        this.initialRender = true;\n        this.isRemove = false;\n        this.isInitialCollapse = false;\n        this.prevScrollTop = 0;\n        this.actions = ['filtering', 'searching', 'grouping', 'ungrouping', 'reorder', 'sorting'];\n        this.keys = ['downArrow', 'upArrow', 'PageUp', 'PageDown'];\n        this.rowTop = 0;\n        this.isInitialMovableRender = true;\n        this.virtualInfiniteData = {};\n        this.isCancel = false;\n        this.emptyRowData = {};\n        this.isNormaledit = false;\n        this.isInfiniteScroll = false;\n        this.isLastPage = false;\n        this.parent = parent;\n        this.serviceLocator = serviceLocator;\n        this.isNormaledit = this.parent.editSettings.mode === 'Normal';\n        this.addEventListener();\n        this.rowModelGenerator = this.parent.getFrozenColumns() ? new FreezeRowModelGenerator(this.parent)\n            : new RowModelGenerator(this.parent);\n    }\n    InfiniteScroll.prototype.getModuleName = function () {\n        return 'infiniteScroll';\n    };\n    /**\n     * @hidden\n     */\n    InfiniteScroll.prototype.addEventListener = function () {\n        this.parent.on(events.dataReady, this.onDataReady, this);\n        this.parent.on(events.dataSourceModified, this.dataSourceModified, this);\n        this.parent.on(events.infinitePageQuery, this.infinitePageQuery, this);\n        this.parent.on(events.infiniteScrollHandler, this.infiniteScrollHandler, this);\n        this.parent.on(events.beforeCellFocused, this.infiniteCellFocus, this);\n        this.parent.on(events.appendInfiniteContent, this.appendInfiniteRows, this);\n        this.parent.on(events.removeInfiniteRows, this.removeInfiniteCacheRows, this);\n        this.parent.on(events.resetInfiniteBlocks, this.resetInfiniteBlocks, this);\n        this.parent.on(events.setInfiniteCache, this.setCache, this);\n        this.parent.on(events.initialCollapse, this.ensureIntialCollapse, this);\n        this.parent.on(events.keyPressed, this.infiniteCellFocus, this);\n        this.parent.on(events.infiniteShowHide, this.setDisplayNone, this);\n        this.parent.on(events.virtualScrollEditActionBegin, this.editActionBegin, this);\n        this.parent.on(events.getVirtualData, this.getVirtualInfiniteData, this);\n        this.parent.on(events.editReset, this.resetInfiniteEdit, this);\n        this.parent.on(events.virtualScrollEditSuccess, this.infiniteEditSuccess, this);\n        this.parent.on(events.refreshVirtualCache, this.refreshInfiniteCache, this);\n        this.parent.on(events.infiniteEditHandler, this.infiniteEditHandler, this);\n        this.parent.on(events.virtualScrollAddActionBegin, this.infiniteAddActionBegin, this);\n        this.parent.on(events.modelChanged, this.modelChanged, this);\n        this.parent.addEventListener(events.actionBegin, this.actionBegin.bind(this));\n        this.parent.addEventListener(events.actionComplete, this.actionComplete.bind(this));\n    };\n    /**\n     * @hidden\n     */\n    InfiniteScroll.prototype.removeEventListener = function () {\n        if (this.parent.isDestroyed) {\n            return;\n        }\n        this.parent.off(events.dataReady, this.onDataReady);\n        this.parent.off(events.dataSourceModified, this.dataSourceModified);\n        this.parent.off(events.infinitePageQuery, this.infinitePageQuery);\n        this.parent.off(events.infiniteScrollHandler, this.infiniteScrollHandler);\n        this.parent.off(events.beforeCellFocused, this.infiniteCellFocus);\n        this.parent.off(events.appendInfiniteContent, this.appendInfiniteRows);\n        this.parent.off(events.removeInfiniteRows, this.removeInfiniteCacheRows);\n        this.parent.off(events.resetInfiniteBlocks, this.resetInfiniteBlocks);\n        this.parent.off(events.setInfiniteCache, this.setCache);\n        this.parent.off(events.initialCollapse, this.ensureIntialCollapse);\n        this.parent.off(events.keyPressed, this.infiniteCellFocus);\n        this.parent.off(events.infiniteShowHide, this.setDisplayNone);\n        this.parent.off(events.virtualScrollEditActionBegin, this.editActionBegin);\n        this.parent.off(events.getVirtualData, this.getVirtualInfiniteData);\n        this.parent.off(events.editReset, this.resetInfiniteEdit);\n        this.parent.off(events.virtualScrollEditSuccess, this.infiniteEditSuccess);\n        this.parent.off(events.refreshVirtualCache, this.refreshInfiniteCache);\n        this.parent.off(events.infiniteEditHandler, this.infiniteEditHandler);\n        this.parent.off(events.virtualScrollAddActionBegin, this.infiniteAddActionBegin);\n        this.parent.off(events.modelChanged, this.modelChanged);\n        this.parent.removeEventListener(events.actionBegin, this.actionBegin.bind(this));\n        this.parent.removeEventListener(events.actionComplete, this.actionComplete.bind(this));\n    };\n    InfiniteScroll.prototype.modelChanged = function (args) {\n        if (args.requestType !== 'infiniteScroll' && (args.requestType === 'delete' || this.requestType === 'add')) {\n            var rows = this.parent.getRows();\n            this.firstIndex = parseInt(rows[0].getAttribute('aria-rowindex'), 10);\n            this.firstBlock = Math.ceil((this.firstIndex + 1) / this.parent.pageSettings.pageSize);\n            this.lastIndex = parseInt(rows[rows.length - 1].getAttribute('aria-rowindex'), 10);\n            if (args.requestType === 'delete') {\n                var rowObj = this.parent.getRowsObject();\n                args.startIndex = this.parent.infiniteScrollSettings.enableCache\n                    ? (this.firstBlock - 1) * this.parent.pageSettings.pageSize : rowObj[rowObj.length - 1].index;\n            }\n            else {\n                args.startIndex = this.firstIndex;\n            }\n            if (!this.parent.infiniteScrollSettings.enableCache\n                && this.parent.pageSettings.currentPage === this.maxPage && args.requestType === 'delete') {\n                this.isLastPage = true;\n                this.lastIndex = this.lastIndex - 1;\n            }\n        }\n    };\n    InfiniteScroll.prototype.infiniteAddActionBegin = function (args) {\n        if (this.isNormaledit) {\n            this.isAdd = true;\n            if (this.parent.infiniteScrollSettings.enableCache) {\n                if (!Object.keys(this.emptyRowData).length) {\n                    this.createEmptyRowdata();\n                }\n                if (this.parent.pageSettings.currentPage > 1) {\n                    args.startEdit = false;\n                    this.resetInfiniteBlocks({}, true);\n                    this.makeRequest({ currentPage: 1 });\n                }\n            }\n        }\n    };\n    InfiniteScroll.prototype.infiniteEditHandler = function (args) {\n        if (!this.parent.infiniteScrollSettings.enableCache && (args.e.requestType === 'delete'\n            || (args.e.requestType === 'save' && this.requestType === 'add'))) {\n            var frozenCols = this.parent.getFrozenColumns();\n            var rowElms = this.parent.getRows();\n            var rows = this.parent.getRowsObject();\n            if (this.ensureRowAvailability(rows, args.result[0])) {\n                this.resetRowIndex(rows, args.e, rowElms, this.requestType === 'add');\n                if (frozenCols) {\n                    var rows_1 = this.parent.getMovableRowsObject();\n                    this.resetRowIndex(rows_1, args.e, this.parent.getMovableDataRows(), this.requestType === 'add');\n                }\n                if (!this.isLastPage) {\n                    this.createRow(rows, args);\n                }\n                else {\n                    this.isLastPage = false;\n                    this.parent.pageSettings.currentPage = this.maxPage;\n                    if (this.parent.selectionModule.index < this.parent.frozenRows) {\n                        remove(rowElms[this.parent.frozenRows - 1]);\n                        this.createRow([rows[this.parent.frozenRows - 1]], args, false, true);\n                        if (frozenCols) {\n                            var movableRows = this.parent.getMovableDataRows();\n                            remove(movableRows[this.parent.frozenRows]);\n                            this.createRow([this.parent.getMovableRowsObject()[this.parent.frozenRows - 1]], args, true, true);\n                        }\n                        setRowElements(this.parent);\n                    }\n                }\n            }\n            this.parent.hideSpinner();\n            this.requestType === 'delete' ? this.parent.notify(events.deleteComplete, args.e)\n                : this.parent.notify(events.saveComplete, args.e);\n        }\n    };\n    InfiniteScroll.prototype.createRow = function (rows, args, isMovable, isFrozenRows) {\n        var row = !isFrozenRows ? this.generateRows(args.result, args.e) : rows;\n        var rowRenderer = new RowRenderer(this.serviceLocator, null, this.parent);\n        var tbody = !this.parent.getFrozenColumns() ? this.parent.getContent().querySelector('tbody') : isMovable\n            ? this.parent.getMovableVirtualContent().querySelector('tbody') : this.parent.getFrozenVirtualContent().querySelector('tbody');\n        if (this.parent.frozenRows) {\n            tbody = isFrozenRows && this.requestType !== 'add' || !isFrozenRows && this.requestType === 'add'\n                ? !this.parent.getFrozenColumns() ? this.parent.getHeaderContent().querySelector('tbody')\n                    : isMovable ? this.parent.getMovableVirtualHeader().querySelector('tbody')\n                        : this.parent.getFrozenVirtualHeader().querySelector('tbody') : tbody;\n        }\n        for (var i = row.length - 1; i >= 0; i--) {\n            if (this.requestType === 'delete') {\n                tbody.appendChild(rowRenderer.render(row[i], this.parent.getColumns()));\n            }\n            else {\n                tbody.insertBefore(rowRenderer.render(row[i], this.parent.getColumns()), tbody.firstElementChild);\n            }\n        }\n        if (!isFrozenRows && this.parent.frozenRows\n            && (this.parent.selectionModule.index < this.parent.frozenRows || this.requestType === 'add')) {\n            var rowElems = isMovable ? this.parent.getMovableDataRows() : this.parent.getRows();\n            var index = isMovable && this.requestType === 'add' ? this.parent.frozenRows : this.parent.frozenRows - 1;\n            remove(rowElems[index]);\n            this.createRow([rows[this.parent.frozenRows - 1]], args, isMovable, true);\n        }\n        if (!this.parent.infiniteScrollSettings.enableCache && !isFrozenRows) {\n            if (!this.parent.getFrozenColumns() || isMovable) {\n                setRowElements(this.parent);\n                this.parent.contentModule.visibleRows = this.requestType === 'add'\n                    ? row.concat(rows) : rows.concat(row);\n            }\n            else {\n                this.parent.contentModule.visibleFrozenRows = this.requestType === 'add'\n                    ? row.concat(rows) : rows.concat(row);\n                this.createRow(this.parent.getMovableRowsObject(), args, true);\n            }\n        }\n    };\n    InfiniteScroll.prototype.ensureRowAvailability = function (rows, data) {\n        var resume = true;\n        if (this.parent.frozenRows && !this.parent.infiniteScrollSettings.enableCache\n            && this.parent.sortSettings.columns && this.requestType === 'add') {\n            var key = this.parent.getPrimaryKeyFieldNames()[0];\n            for (var i = 0; i < rows.length; i++) {\n                if (rows[i].data[key] === data[key]) {\n                    resume = false;\n                    break;\n                }\n            }\n        }\n        return resume;\n    };\n    InfiniteScroll.prototype.generateRows = function (data, args) {\n        return this.rowModelGenerator.generateRows(data, args);\n    };\n    InfiniteScroll.prototype.resetRowIndex = function (rows, args, rowElms, isAdd) {\n        var keyField = this.parent.getPrimaryKeyFieldNames()[0];\n        var isRemove = !(rowElms.length % this.parent.pageSettings.pageSize);\n        if (isAdd) {\n            if (isRemove) {\n                remove(rowElms[rows.length - 1]);\n                rowElms.splice(rows.length - 1, 1);\n                rows.splice(rows.length - 1, 1);\n            }\n        }\n        else {\n            rows.filter(function (e, index) {\n                if (e.data[keyField] === args.data[0][keyField]) {\n                    rows.splice(index, 1);\n                    remove(rowElms[index]);\n                    rowElms.splice(index, 1);\n                }\n            });\n        }\n        var startIndex = isAdd ? 1 : 0;\n        resetRowIndex(this.parent, rows, rowElms, startIndex);\n    };\n    InfiniteScroll.prototype.setDisplayNone = function (args) {\n        if (this.parent.infiniteScrollSettings.enableCache) {\n            var frozenCols = this.parent.getFrozenColumns();\n            var keys = frozenCols ? Object.keys(this.infiniteFrozenCache) : Object.keys(this.infiniteCache);\n            for (var i = 1; i <= keys.length; i++) {\n                var cache = frozenCols ? args.isFreeze ? this.infiniteFrozenCache[i][0]\n                    : this.infiniteFrozenCache[i][1] : this.infiniteCache[i];\n                cache.filter(function (e) {\n                    e.cells[args.index].visible = args.visible === '';\n                });\n            }\n            this.resetContentModuleCache(frozenCols ? this.infiniteFrozenCache : this.infiniteCache);\n        }\n    };\n    InfiniteScroll.prototype.refreshInfiniteCache = function (data) {\n        this.getEditedRowObject().data = data;\n    };\n    InfiniteScroll.prototype.getEditedRowObject = function () {\n        var rowObjects = this.parent.getRowsObject();\n        var editedrow;\n        for (var i = 0; i < rowObjects.length; i++) {\n            if (rowObjects[i].index === this.editRowIndex) {\n                editedrow = rowObjects[i];\n            }\n        }\n        return editedrow;\n    };\n    InfiniteScroll.prototype.infiniteEditSuccess = function (args) {\n        if (this.isNormaledit) {\n            if (!this.isAdd && args.data) {\n                this.updateCurrentViewRecords(args.data);\n            }\n            this.isAdd = false;\n        }\n    };\n    InfiniteScroll.prototype.updateCurrentViewRecords = function (data) {\n        var index = getEditedDataIndex(this.parent, data);\n        if (!isNullOrUndefined(index)) {\n            this.parent.getCurrentViewRecords()[index] = data;\n        }\n    };\n    InfiniteScroll.prototype.actionBegin = function (args) {\n        if (args.requestType === 'add' || args.requestType === 'delete') {\n            this.requestType = args.requestType;\n        }\n    };\n    InfiniteScroll.prototype.actionComplete = function (args) {\n        if (args.requestType === 'delete' || args.requestType === 'save' || args.requestType === 'cancel') {\n            this.requestType = this.empty;\n            this.isCancel = args.requestType === 'cancel' || args.requestType === 'save';\n            this.isAdd = this.isEdit = false;\n            if (this.isNormaledit) {\n                this.editRowIndex = this.empty;\n                this.virtualInfiniteData = {};\n                this.parent.editModule.previousVirtualData = {};\n            }\n        }\n    };\n    InfiniteScroll.prototype.resetInfiniteEdit = function () {\n        if (this.parent.enableInfiniteScrolling && this.isNormaledit) {\n            if ((this.parent.editSettings.allowEditing && this.isEdit) || (this.parent.editSettings.allowAdding && this.isAdd)) {\n                this.parent.isEdit = true;\n            }\n        }\n    };\n    InfiniteScroll.prototype.getVirtualInfiniteData = function (data) {\n        data.virtualData = this.virtualInfiniteData;\n        data.isAdd = this.isAdd;\n        data.isCancel = this.isCancel;\n    };\n    InfiniteScroll.prototype.editActionBegin = function (e) {\n        this.isEdit = true;\n        this.editRowIndex = e.index;\n        var rowObject = extend({}, this.getEditedRowObject().data);\n        e.data = Object.keys(this.virtualInfiniteData).length ? this.virtualInfiniteData : rowObject;\n    };\n    InfiniteScroll.prototype.dataSourceModified = function () {\n        this.resetInfiniteBlocks({ requestType: this.empty }, true);\n    };\n    InfiniteScroll.prototype.onDataReady = function (e) {\n        if (!isNullOrUndefined(e.count)) {\n            this.maxPage = Math.ceil(e.count / this.parent.pageSettings.pageSize);\n        }\n    };\n    InfiniteScroll.prototype.ensureIntialCollapse = function (isExpand) {\n        this.isInitialCollapse = !isExpand;\n    };\n    InfiniteScroll.prototype.infiniteScrollHandler = function (e) {\n        var _this = this;\n        this.restoreInfiniteEdit();\n        this.restoreInfiniteAdd();\n        var targetEle = e.target;\n        var isInfinite = targetEle.classList.contains('e-content')\n            || targetEle.classList.contains('e-movablecontent');\n        if (isInfinite && this.parent.enableInfiniteScrolling) {\n            var scrollEle = this.parent.getFrozenColumns() ? this.parent.getMovableVirtualContent()\n                : this.parent.getContent().firstElementChild;\n            this.prevScrollTop = scrollEle.scrollTop;\n            var rows = this.parent.getRows();\n            var index = parseInt(rows[rows.length - 1].getAttribute('aria-rowindex'), 10) + 1;\n            var prevPage = this.parent.pageSettings.currentPage;\n            var args = void 0;\n            var offset = targetEle.scrollHeight - targetEle.scrollTop;\n            var round = Math.round(targetEle.scrollHeight - targetEle.scrollTop);\n            var floor = offset < targetEle.clientHeight ? Math.ceil(offset) : Math.floor(offset);\n            var isBottom = (floor === targetEle.clientHeight || round === targetEle.clientHeight);\n            if (this.isScroll && isBottom && (this.parent.pageSettings.currentPage <= this.maxPage - 1 || this.enableContinuousScroll)) {\n                if (this.parent.infiniteScrollSettings.enableCache) {\n                    this.isUpScroll = false;\n                    this.isDownScroll = true;\n                    setTimeout(function () {\n                        _this.isScroll = true;\n                    }, 600);\n                }\n                var rows_2 = [].slice.call(scrollEle.querySelectorAll('.e-row:not(.e-addedrow)'));\n                var row = rows_2[rows_2.length - 1];\n                var rowIndex = parseInt(row.getAttribute('aria-rowindex'), 10);\n                this.parent.pageSettings.currentPage = Math.ceil(rowIndex / this.parent.pageSettings.pageSize) + 1;\n                args = {\n                    requestType: 'infiniteScroll',\n                    currentPage: this.parent.pageSettings.currentPage,\n                    prevPage: prevPage,\n                    startIndex: index,\n                    direction: 'down'\n                };\n                this.makeRequest(args);\n            }\n            if (this.isScroll && this.parent.infiniteScrollSettings.enableCache && targetEle.scrollTop === 0\n                && this.parent.pageSettings.currentPage !== 1) {\n                if (this.parent.infiniteScrollSettings.enableCache) {\n                    this.isDownScroll = false;\n                    this.isUpScroll = true;\n                    setTimeout(function () {\n                        _this.isScroll = true;\n                    }, 600);\n                }\n                var row = [].slice.call(scrollEle.querySelectorAll('.e-row'));\n                var rowIndex = parseInt(row[this.parent.pageSettings.pageSize - 1].getAttribute('aria-rowindex'), 10);\n                var startIndex = parseInt(row[0].getAttribute('aria-rowindex'), 10) - this.parent.pageSettings.pageSize;\n                this.parent.pageSettings.currentPage = Math.ceil(rowIndex / this.parent.pageSettings.pageSize) - 1;\n                if (this.parent.pageSettings.currentPage) {\n                    args = {\n                        requestType: 'infiniteScroll',\n                        currentPage: this.parent.pageSettings.currentPage,\n                        prevPage: prevPage,\n                        startIndex: startIndex,\n                        direction: 'up'\n                    };\n                    this.makeRequest(args);\n                }\n            }\n            if (this.parent.infiniteScrollSettings.enableCache && !this.isScroll && isNullOrUndefined(args)) {\n                if (this.isDownScroll || this.isUpScroll) {\n                    scrollEle.scrollTop = this.top;\n                }\n            }\n        }\n    };\n    InfiniteScroll.prototype.makeRequest = function (args) {\n        var _this = this;\n        if (this.parent.pageSettings.currentPage !== args.prevPage) {\n            if (this.parent.pageSettings.currentPage <= this.maxPage) {\n                this.isInfiniteScroll = true;\n                if (isNullOrUndefined(this.infiniteCache[args.currentPage])) {\n                    setTimeout(function () {\n                        _this.getVirtualInfiniteEditedData();\n                        _this.parent.notify('model-changed', args);\n                    }, 100);\n                }\n                else {\n                    setTimeout(function () {\n                        _this.getVirtualInfiniteEditedData();\n                        _this.parent.notify(events.refreshInfiniteModeBlocks, args);\n                    }, 100);\n                }\n            }\n            else {\n                this.parent.pageSettings.currentPage = this.maxPage;\n            }\n        }\n    };\n    InfiniteScroll.prototype.infinitePageQuery = function (query) {\n        if (this.initialRender) {\n            this.initialRender = false;\n            this.intialPageQuery(query);\n        }\n        else {\n            if (!this.isInfiniteScroll && (this.requestType === 'delete' || this.requestType === 'add')) {\n                this.editPageQuery(query);\n            }\n            else {\n                query.page(this.parent.pageSettings.currentPage, this.parent.pageSettings.pageSize);\n            }\n        }\n    };\n    InfiniteScroll.prototype.editPageQuery = function (query) {\n        var initialBlocks = this.parent.infiniteScrollSettings.initialBlocks;\n        var isCache = this.parent.infiniteScrollSettings.enableCache;\n        if (isCache) {\n            this.infiniteCache = {};\n            this.infiniteFrozenCache = {};\n            query.skip(this.firstIndex);\n            query.take(initialBlocks * this.parent.pageSettings.pageSize);\n        }\n        else {\n            if (this.parent.editSettings.mode === 'Dialog') {\n                this.parent.clearSelection();\n            }\n            var index = this.requestType === 'delete' ? this.lastIndex : this.firstIndex;\n            query.skip(index);\n            query.take(1);\n        }\n    };\n    InfiniteScroll.prototype.intialPageQuery = function (query) {\n        if (this.parent.infiniteScrollSettings.enableCache\n            && this.parent.infiniteScrollSettings.initialBlocks > this.parent.infiniteScrollSettings.maxBlocks) {\n            this.parent.infiniteScrollSettings.initialBlocks = this.parent.infiniteScrollSettings.maxBlocks;\n        }\n        var pageSize = this.parent.pageSettings.pageSize * this.parent.infiniteScrollSettings.initialBlocks;\n        query.page(1, pageSize);\n    };\n    InfiniteScroll.prototype.infiniteCellFocus = function (e) {\n        if (e.byKey && (e.keyArgs.action === 'upArrow' || e.keyArgs.action === 'downArrow')) {\n            this.pressedKey = e.keyArgs.action;\n            var ele = document.activeElement;\n            var rowIndex = parseInt(ele.parentElement.getAttribute('aria-rowindex'), 10);\n            var scrollEle = this.parent.getContent().firstElementChild;\n            this.rowIndex = e.keyArgs.action === 'downArrow' ? rowIndex + 1 : rowIndex - 1;\n            this.cellIndex = parseInt(ele.getAttribute('aria-colindex'), 10);\n            var row = this.parent.getRowByIndex(rowIndex);\n            var visibleRowCount = Math.floor(scrollEle.offsetHeight / this.parent.getRowHeight());\n            if (!row || ensureLastRow(row, this.parent) || ensureFirstRow(row, this.rowTop)) {\n                var height = row ? row.getBoundingClientRect().height : this.parent.getRowHeight();\n                if (!this.parent.infiniteScrollSettings.enableCache) {\n                    if (e.keyArgs.action === 'downArrow' && (ensureLastRow(row, this.parent) || !row)) {\n                        var nTop = (this.rowIndex - visibleRowCount) * height;\n                        var oTop = scrollEle.scrollTop + this.parent.getRowHeight();\n                        scrollEle.scrollTop = nTop < oTop ? oTop : nTop;\n                    }\n                    if (e.keyArgs.action === 'upArrow' && ensureFirstRow(row, this.rowTop)) {\n                        scrollEle.scrollTop = this.rowIndex * height;\n                    }\n                }\n            }\n            else {\n                this.pressedKey = this.empty;\n            }\n        }\n        else if (e.key === 'PageDown' || e.key === 'PageUp') {\n            this.pressedKey = e.key;\n        }\n    };\n    InfiniteScroll.prototype.createEmptyRowdata = function () {\n        var _this = this;\n        this.parent.getColumns().filter(function (e) {\n            _this.emptyRowData[e.field] = _this.empty;\n        });\n    };\n    InfiniteScroll.prototype.getVirtualInfiniteEditedData = function () {\n        var editForm = this.parent.element.querySelector('.e-editedrow');\n        var addForm = this.parent.element.querySelector('.e-addedrow');\n        var gridForm = this.parent.element.querySelector('.e-gridform');\n        if (this.parent.infiniteScrollSettings.enableCache && (editForm || addForm)) {\n            var rowData = editForm ? extend({}, this.getEditedRowObject().data)\n                : extend({}, this.emptyRowData);\n            this.virtualInfiniteData = this.parent.editModule.getCurrentEditedData(gridForm, rowData);\n            if (this.parent.getFrozenColumns()) {\n                this.virtualInfiniteData = this.parent.editModule\n                    .getCurrentEditedData(this.parent.getMovableVirtualContent().querySelector('.e-gridform'), rowData);\n            }\n        }\n    };\n    InfiniteScroll.prototype.restoreInfiniteEdit = function () {\n        var content = this.parent.getFrozenColumns() ? this.parent.getMovableVirtualContent()\n            : this.parent.getContent().firstElementChild;\n        var frozenEdit = this.parent.frozenRows ? this.editRowIndex >= this.parent.frozenRows : true;\n        if (this.isNormaledit && this.parent.infiniteScrollSettings.enableCache && frozenEdit) {\n            if (this.parent.editSettings.allowEditing && !isNullOrUndefined(this.editRowIndex)) {\n                var row = this.parent.getRowByIndex(this.editRowIndex);\n                if (Object.keys(this.virtualInfiniteData).length && row && !this.parent.getContent().querySelector('.e-editedrow')) {\n                    var top_1 = row.getBoundingClientRect().top;\n                    if (top_1 < content.offsetHeight && top_1 > this.parent.getRowHeight()) {\n                        this.parent.isEdit = false;\n                        this.parent.editModule.startEdit(row);\n                    }\n                }\n            }\n        }\n    };\n    InfiniteScroll.prototype.restoreInfiniteAdd = function () {\n        var content = this.parent.getFrozenColumns() ? this.parent.getMovableVirtualContent()\n            : this.parent.getContent().firstElementChild;\n        if (this.parent.getRowByIndex(0) && this.isNormaledit && this.parent.infiniteScrollSettings.enableCache\n            && this.isAdd && !content.querySelector('.e-addedrow')) {\n            var isTop = content.scrollTop < this.parent.getRowHeight();\n            if (isTop) {\n                this.parent.isEdit = false;\n                this.parent.addRecord();\n            }\n        }\n    };\n    InfiniteScroll.prototype.appendInfiniteRows = function (e) {\n        var target = document.activeElement;\n        var frozenCols = this.parent.getFrozenColumns();\n        var scrollEle = frozenCols ? this.parent.getMovableVirtualContent()\n            : this.parent.getContent().firstElementChild;\n        var isInfiniteScroll = this.parent.enableInfiniteScrolling && e.args.requestType === 'infiniteScroll';\n        if ((isInfiniteScroll && !e.args.isFrozen) || !isInfiniteScroll) {\n            if (isInfiniteScroll && e.args.direction === 'up') {\n                e.tbody.insertBefore(e.frag, e.tbody.firstElementChild);\n            }\n            else {\n                e.tbody.appendChild(e.frag);\n            }\n        }\n        if (!frozenCols) {\n            this.parent.contentModule.getTable().appendChild(e.tbody);\n        }\n        else {\n            if (isInfiniteScroll) {\n                if (e.args.isFrozen) {\n                    this.frozenFrag = e.frag;\n                }\n                else {\n                    var tbody = this.parent.getFrozenVirtualContent().querySelector('tbody');\n                    e.args.direction === 'up' ? tbody.insertBefore(this.frozenFrag, tbody.firstElementChild)\n                        : tbody.appendChild(this.frozenFrag);\n                    this.parent.getMovableVirtualContent().querySelector('.e-table').appendChild(e.tbody);\n                }\n            }\n            else {\n                var table = e.args.isFrozen ? this.parent.getFrozenVirtualContent().querySelector('.e-table')\n                    : this.parent.getMovableVirtualContent().querySelector('.e-table');\n                table.appendChild(e.tbody);\n            }\n        }\n        if (!e.args.isFrozen) {\n            this.rowTop = !this.rowTop ? this.parent.getRows()[0].getBoundingClientRect().top : this.rowTop;\n            if (isInfiniteScroll) {\n                if (this.parent.infiniteScrollSettings.enableCache && this.isRemove) {\n                    scrollEle.scrollTop = this.top;\n                    if (frozenCols) {\n                        this.parent.getFrozenVirtualContent().scrollTop = this.top;\n                    }\n                }\n                setRowElements(this.parent);\n                this.selectNewRow(e.tbody, e.args.startIndex);\n                this.pressedKey = undefined;\n            }\n            this.restoreInfiniteAdd();\n        }\n        this.isInfiniteScroll = false;\n    };\n    InfiniteScroll.prototype.setRowElements = function () {\n        if (this.parent.getFrozenColumns()) {\n            this.parent.contentModule.rowElements =\n                [].slice.call(this.parent.element.querySelectorAll('.e-movableheader .e-row, .e-movablecontent .e-row'));\n            this.parent.contentModule.freezeRowElements =\n                [].slice.call(this.parent.element.querySelectorAll('.e-frozenheader .e-row, .e-frozencontent .e-row'));\n        }\n        else {\n            this.parent.contentModule.rowElements =\n                [].slice.call(this.parent.element.querySelectorAll('.e-row:not(.e-addedrow)'));\n        }\n    };\n    InfiniteScroll.prototype.selectNewRow = function (tbody, startIndex) {\n        var _this = this;\n        var row = this.parent.getRowByIndex(this.rowIndex);\n        if (this.keys.some(function (value) { return value === _this.pressedKey; })) {\n            if (this.pressedKey === 'downArrow' || (this.parent.infiniteScrollSettings.enableCache && this.pressedKey === 'upArrow')) {\n                setTimeout(function () {\n                    // tslint:disable-next-line:no-any\n                    var target = row.cells[0];\n                    target.focus({ preventScroll: true });\n                    _this.parent.selectRow(_this.rowIndex);\n                    _this.parent.getContent().firstElementChild.scrollTop += _this.parent.getRowHeight();\n                }, 0);\n            }\n            if (this.pressedKey === 'PageDown') {\n                var row_1 = this.parent.getRowByIndex(startIndex);\n                if (row_1) {\n                    row_1.cells[0].focus();\n                }\n            }\n            if (this.pressedKey === 'PageUp') {\n                tbody.querySelector('.e-row').cells[0].focus();\n            }\n        }\n    };\n    InfiniteScroll.prototype.removeInfiniteCacheRows = function (e) {\n        var isInfiniteScroll = this.parent.enableInfiniteScrolling && e.args.requestType === 'infiniteScroll';\n        if (!e.args.isFrozen && isInfiniteScroll && this.parent.infiniteScrollSettings.enableCache && this.isRemove) {\n            var rows = [].slice.call(this.parent.getContentTable().querySelectorAll('.e-row'));\n            if (e.args.direction === 'down') {\n                if (this.parent.allowGrouping && this.parent.groupSettings.columns.length) {\n                    var captionRows = [].slice.call(this.parent.getContentTable().querySelectorAll('tr'));\n                    this.removeCaptionRows(captionRows, e.args);\n                }\n                var addRowCount = this.parent.element.querySelector('.e-addedrow') ? 0 : 1;\n                this.removeTopRows(rows, this.parent.pageSettings.pageSize - addRowCount);\n            }\n            if (e.args.direction === 'up') {\n                if (this.parent.allowGrouping && this.parent.groupSettings.columns.length) {\n                    var captionRows = [].slice.call(this.parent.getContentTable().querySelectorAll('tr'));\n                    this.removeCaptionRows(captionRows, e.args);\n                }\n                else {\n                    this.removeBottomRows(rows, rows.length - 1, e.args);\n                }\n            }\n            this.isScroll = false;\n            this.top = this.calculateScrollTop(e.args);\n        }\n    };\n    InfiniteScroll.prototype.calculateScrollTop = function (args) {\n        var top = 0;\n        var scrollCnt = this.parent.getFrozenColumns() ? this.parent.getMovableVirtualContent()\n            : this.parent.getContent().firstElementChild;\n        if (args.direction === 'down') {\n            if (this.parent.allowGrouping && this.parent.groupSettings.columns.length && !this.isInitialCollapse) {\n                top = this.captionRowHeight();\n            }\n            var captionRows = [].slice.call(this.parent.getContent().firstElementChild.querySelectorAll('tr:not(.e-row)'));\n            var captionCount = 0;\n            if (this.isInitialCollapse && !isNullOrUndefined(captionRows)) {\n                captionCount = Math.round((captionRows.length - 1) / this.parent.groupSettings.columns.length);\n            }\n            var value = captionCount ? captionCount\n                : this.parent.pageSettings.pageSize * (this.parent.infiniteScrollSettings.maxBlocks - 1);\n            var currentViewRowCount = 0;\n            var i = 0;\n            while (currentViewRowCount < scrollCnt.clientHeight) {\n                i++;\n                currentViewRowCount = i * this.parent.getRowHeight();\n            }\n            i = i - 1;\n            top += (value - i) * this.parent.getRowHeight();\n        }\n        if (args.direction === 'up') {\n            if (this.parent.allowGrouping && this.parent.groupSettings.columns.length && !this.isInitialCollapse) {\n                top = this.infiniteCache[this.parent.pageSettings.currentPage].length * this.parent.getRowHeight();\n            }\n            else if (this.isInitialCollapse) {\n                var groupedData = this.infiniteCache[this.parent.pageSettings.currentPage];\n                var count = 0;\n                for (var i = 0; i < groupedData.length; i++) {\n                    if (groupedData[i].isCaptionRow) {\n                        count++;\n                    }\n                }\n                top += Math.round(count / this.parent.groupSettings.columns.length) * this.parent.getRowHeight();\n            }\n            else {\n                top += (this.parent.pageSettings.pageSize * this.parent.getRowHeight() + getScrollBarWidth());\n            }\n        }\n        return top;\n    };\n    InfiniteScroll.prototype.captionRowHeight = function () {\n        var rows = [].slice.call(this.parent.getContent().querySelectorAll('tr:not(.e-row)'));\n        return rows.length * this.parent.getRowHeight();\n    };\n    InfiniteScroll.prototype.removeTopRows = function (rows, maxIndx) {\n        var frozeCols = this.parent.getFrozenColumns();\n        var movableRows = frozeCols ?\n            [].slice.call(this.parent.getMovableVirtualContent().querySelectorAll('.e-row')) : null;\n        for (var i = 0; i <= maxIndx; i++) {\n            if (this.parent.frozenRows && this.parent.pageSettings.currentPage === this.parent.infiniteScrollSettings.maxBlocks + 1\n                && i > (maxIndx - this.parent.frozenRows)) {\n                continue;\n            }\n            remove(rows[i]);\n            if (movableRows) {\n                remove(movableRows[i]);\n            }\n        }\n    };\n    InfiniteScroll.prototype.removeBottomRows = function (rows, maxIndx, args) {\n        var cnt = 0;\n        var frozeCols = this.parent.getFrozenColumns();\n        var movableRows = frozeCols ?\n            [].slice.call(this.parent.getMovableVirtualContent().querySelectorAll('.e-row')) : null;\n        var pageSize = this.parent.pageSettings.pageSize;\n        if (!frozeCols && this.infiniteCache[args.prevPage].length < pageSize) {\n            cnt = this.parent.pageSettings.pageSize - this.infiniteCache[args.prevPage].length;\n        }\n        if (frozeCols && this.infiniteFrozenCache[args.prevPage][1].length < pageSize) {\n            cnt = this.parent.pageSettings.pageSize - this.infiniteFrozenCache[args.prevPage][1].length;\n        }\n        for (var i = maxIndx; cnt < pageSize; i--) {\n            cnt++;\n            remove(rows[i]);\n            if (movableRows) {\n                remove(movableRows[i]);\n            }\n        }\n    };\n    InfiniteScroll.prototype.removeCaptionRows = function (rows, args) {\n        if (args.direction === 'down') {\n            var lastRow = this.parent.getRows()[this.parent.pageSettings.pageSize];\n            var lastRowIndex = parseInt(lastRow.getAttribute('aria-rowindex'), 10) - 1;\n            var k = 0;\n            for (var i = 0; k < lastRowIndex; i++) {\n                if (!rows[i].classList.contains('e-row')) {\n                    remove(rows[i]);\n                }\n                else {\n                    k = parseInt(rows[i].getAttribute('aria-rowindex'), 10);\n                }\n            }\n        }\n        if (args.direction === 'up') {\n            var rowElements = [].slice.call(this.parent.getContent().querySelectorAll('.e-row'));\n            var lastIndex = parseInt(rowElements[rowElements.length - 1].getAttribute('aria-rowindex'), 10);\n            var page = Math.ceil(lastIndex / this.parent.pageSettings.pageSize);\n            var startIndex = 0;\n            for (var i = this.parent.pageSettings.currentPage + 1; i < page; i++) {\n                startIndex += this.infiniteCache[i].length;\n            }\n            for (var i = startIndex; i < rows.length; i++) {\n                remove(rows[i]);\n            }\n        }\n    };\n    InfiniteScroll.prototype.resetInfiniteBlocks = function (args, isDataModified) {\n        var isInfiniteScroll = this.parent.enableInfiniteScrolling && args.requestType !== 'infiniteScroll';\n        if (!this.initialRender && !isNullOrUndefined(this.parent.infiniteScrollModule) && isInfiniteScroll) {\n            if (this.actions.some(function (value) { return value === args.requestType; }) || isDataModified) {\n                var scrollEle = this.parent.getFrozenColumns() ? this.parent.getMovableVirtualContent()\n                    : this.parent.getContent().firstElementChild;\n                this.initialRender = true;\n                scrollEle.scrollTop = 0;\n                this.parent.pageSettings.currentPage = 1;\n                this.infiniteCache = this.infiniteFrozenCache = {};\n                this.resetContentModuleCache({});\n                this.isRemove = false;\n                this.top = 0;\n                this.isInitialMovableRender = true;\n                this.isInitialCollapse = false;\n                this.parent.contentModule.isRemove = this.isRemove;\n                this.parent.contentModule.isAddRows = this.isRemove;\n                this.parent.contentModule.visibleRows = [];\n                this.parent.contentModule.visibleFrozenRows = [];\n            }\n        }\n    };\n    InfiniteScroll.prototype.setCache = function (e) {\n        if (this.parent.enableInfiniteScrolling && this.parent.infiniteScrollSettings.enableCache) {\n            var frozeCols = this.parent.getFrozenColumns();\n            var idx = e.args.isFrozen ? 1 : 0;\n            var isEdit = e.args.requestType !== 'infiniteScroll'\n                && (this.requestType === 'delete' || this.requestType === 'add');\n            var currentPage = this.parent.pageSettings.currentPage;\n            if ((frozeCols && this.isInitialMovableRender) || (!frozeCols && !Object.keys(this.infiniteCache).length) || isEdit) {\n                this.isInitialMovableRender = !e.args.isFrozen;\n                this.setInitialCache(e.modelData, e.args, isEdit);\n            }\n            if (!frozeCols && isNullOrUndefined(this.infiniteCache[this.parent.pageSettings.currentPage])) {\n                this.infiniteCache[this.parent.pageSettings.currentPage] = e.modelData;\n                this.resetContentModuleCache(this.infiniteCache);\n            }\n            if (frozeCols) {\n                if ((idx === 0 && isNullOrUndefined(this.infiniteFrozenCache[currentPage]))\n                    || !this.infiniteFrozenCache[currentPage][idx].length) {\n                    this.createFrozenCache(currentPage);\n                    this.infiniteFrozenCache[currentPage][idx] = e.modelData;\n                    if (idx === 1) {\n                        this.resetContentModuleCache(this.infiniteFrozenCache);\n                    }\n                }\n            }\n            if (e.isInfiniteScroll && !this.isRemove) {\n                this.isRemove = (currentPage - 1) % this.parent.infiniteScrollSettings.maxBlocks === 0;\n                this.parent.contentModule.isRemove = this.isRemove;\n            }\n        }\n    };\n    InfiniteScroll.prototype.setInitialCache = function (data, args, isEdit) {\n        var frozenCols = this.parent.getFrozenColumns();\n        var idx = args.isFrozen ? 1 : 0;\n        var k = !isEdit ? 1 : this.firstBlock;\n        for (var i = 1; i <= this.parent.infiniteScrollSettings.initialBlocks; i++) {\n            var startIndex = (i - 1) * this.parent.pageSettings.pageSize;\n            var endIndex = i * this.parent.pageSettings.pageSize;\n            if (this.parent.allowGrouping && this.parent.groupSettings.columns.length) {\n                this.setInitialGroupCache(data, k, startIndex, endIndex);\n            }\n            else {\n                if (frozenCols) {\n                    this.createFrozenCache(k);\n                    this.infiniteFrozenCache[k][idx] = data.slice(startIndex, endIndex);\n                    this.resetContentModuleCache(this.infiniteFrozenCache);\n                }\n                else {\n                    this.infiniteCache[k] = data.slice(startIndex, endIndex);\n                    this.resetContentModuleCache(this.infiniteCache);\n                }\n            }\n            k++;\n        }\n    };\n    InfiniteScroll.prototype.createFrozenCache = function (index) {\n        if (!this.infiniteFrozenCache[index]) {\n            this.infiniteFrozenCache[index] = [[], []];\n        }\n    };\n    InfiniteScroll.prototype.setInitialGroupCache = function (data, index, sIndex, eIndex) {\n        var pageData = [];\n        var startIndex = 0;\n        for (var i = 1; i <= Object.keys(this.infiniteCache).length; i++) {\n            startIndex += this.infiniteCache[i].length;\n        }\n        var k = sIndex;\n        for (var i = startIndex; i < data.length && k < eIndex; i++) {\n            if (data[i].index < eIndex || data[i].isCaptionRow) {\n                k = data[i].isCaptionRow ? k : data[i].index;\n                pageData.push(data[i]);\n            }\n            if (data[i].index >= eIndex || data[i].index === eIndex - 1) {\n                break;\n            }\n        }\n        this.infiniteCache[index] = pageData;\n        this.resetContentModuleCache(this.infiniteCache);\n    };\n    InfiniteScroll.prototype.resetContentModuleCache = function (data) {\n        this.parent.contentModule\n            .infiniteCache = data;\n    };\n    /**\n     * @hidden\n     */\n    InfiniteScroll.prototype.destroy = function () {\n        this.removeEventListener();\n    };\n    return InfiniteScroll;\n}());\nexport { InfiniteScroll };\n"]},"metadata":{},"sourceType":"module"}