{"ast":null,"code":"import { RowModelGenerator } from '../services/row-model-generator';\nimport { isBlazor } from '@syncfusion/ej2-base';\n/**\n * FreezeRowModelGenerator is used to generate grid data rows with freeze row and column.\n * @hidden\n */\n\nvar FreezeRowModelGenerator =\n/** @class */\nfunction () {\n  function FreezeRowModelGenerator(parent) {\n    this.isFrzLoad = 1;\n    this.parent = parent;\n    this.rowModelGenerator = new RowModelGenerator(this.parent);\n  }\n\n  FreezeRowModelGenerator.prototype.generateRows = function (data, notifyArgs, virtualRows) {\n    var frzCols = this.parent.getFrozenColumns();\n    frzCols = frzCols && this.parent.isRowDragable() ? frzCols + 1 : frzCols;\n\n    if (this.isFrzLoad % 2 !== 0 && notifyArgs.requestType === 'virtualscroll' && notifyArgs.virtualInfo.sentinelInfo.axis === 'X') {\n      this.isFrzLoad++;\n      return null;\n    }\n\n    var row = this.parent.enableVirtualization ? virtualRows : this.rowModelGenerator.generateRows(data, notifyArgs);\n\n    if (isBlazor() && !this.parent.isJsComponent) {\n      return row;\n    }\n\n    for (var i = 0, len = row.length; i < len; i++) {\n      if (this.isFrzLoad % 2 === 0) {\n        row[i].cells = row[i].cells.slice(frzCols, row[i].cells.length);\n      } else {\n        row[i].isFreezeRow = true;\n        row[i].cells = row[i].cells.slice(0, frzCols);\n      }\n    }\n\n    this.isFrzLoad++;\n    return row;\n  };\n\n  return FreezeRowModelGenerator;\n}();\n\nexport { FreezeRowModelGenerator };","map":{"version":3,"sources":["D:/Projects/TCC/Finances/node_modules/@syncfusion/ej2-grids/src/grid/services/freeze-row-model-generator.js"],"names":["RowModelGenerator","isBlazor","FreezeRowModelGenerator","parent","isFrzLoad","rowModelGenerator","prototype","generateRows","data","notifyArgs","virtualRows","frzCols","getFrozenColumns","isRowDragable","requestType","virtualInfo","sentinelInfo","axis","row","enableVirtualization","isJsComponent","i","len","length","cells","slice","isFreezeRow"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,iCAAlC;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA;AACA;AACA;AACA;;AACA,IAAIC,uBAAuB;AAAG;AAAe,YAAY;AACrD,WAASA,uBAAT,CAAiCC,MAAjC,EAAyC;AACrC,SAAKC,SAAL,GAAiB,CAAjB;AACA,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKE,iBAAL,GAAyB,IAAIL,iBAAJ,CAAsB,KAAKG,MAA3B,CAAzB;AACH;;AACDD,EAAAA,uBAAuB,CAACI,SAAxB,CAAkCC,YAAlC,GAAiD,UAAUC,IAAV,EAAgBC,UAAhB,EAA4BC,WAA5B,EAAyC;AACtF,QAAIC,OAAO,GAAG,KAAKR,MAAL,CAAYS,gBAAZ,EAAd;AACAD,IAAAA,OAAO,GAAGA,OAAO,IAAI,KAAKR,MAAL,CAAYU,aAAZ,EAAX,GAAyCF,OAAO,GAAG,CAAnD,GAAuDA,OAAjE;;AACA,QAAI,KAAKP,SAAL,GAAiB,CAAjB,KAAuB,CAAvB,IAA4BK,UAAU,CAACK,WAAX,KAA2B,eAAvD,IAA0EL,UAAU,CAACM,WAAX,CAAuBC,YAAvB,CAAoCC,IAApC,KAA6C,GAA3H,EAAgI;AAC5H,WAAKb,SAAL;AACA,aAAO,IAAP;AACH;;AACD,QAAIc,GAAG,GAAG,KAAKf,MAAL,CAAYgB,oBAAZ,GAAmCT,WAAnC,GACJ,KAAKL,iBAAL,CAAuBE,YAAvB,CAAoCC,IAApC,EAA0CC,UAA1C,CADN;;AAEA,QAAIR,QAAQ,MAAM,CAAC,KAAKE,MAAL,CAAYiB,aAA/B,EAA8C;AAC1C,aAAOF,GAAP;AACH;;AACD,SAAK,IAAIG,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGJ,GAAG,CAACK,MAA1B,EAAkCF,CAAC,GAAGC,GAAtC,EAA2CD,CAAC,EAA5C,EAAgD;AAC5C,UAAI,KAAKjB,SAAL,GAAiB,CAAjB,KAAuB,CAA3B,EAA8B;AAC1Bc,QAAAA,GAAG,CAACG,CAAD,CAAH,CAAOG,KAAP,GAAeN,GAAG,CAACG,CAAD,CAAH,CAAOG,KAAP,CAAaC,KAAb,CAAmBd,OAAnB,EAA4BO,GAAG,CAACG,CAAD,CAAH,CAAOG,KAAP,CAAaD,MAAzC,CAAf;AACH,OAFD,MAGK;AACDL,QAAAA,GAAG,CAACG,CAAD,CAAH,CAAOK,WAAP,GAAqB,IAArB;AACAR,QAAAA,GAAG,CAACG,CAAD,CAAH,CAAOG,KAAP,GAAeN,GAAG,CAACG,CAAD,CAAH,CAAOG,KAAP,CAAaC,KAAb,CAAmB,CAAnB,EAAsBd,OAAtB,CAAf;AACH;AACJ;;AACD,SAAKP,SAAL;AACA,WAAOc,GAAP;AACH,GAvBD;;AAwBA,SAAOhB,uBAAP;AACH,CA/B4C,EAA7C;;AAgCA,SAASA,uBAAT","sourcesContent":["import { RowModelGenerator } from '../services/row-model-generator';\nimport { isBlazor } from '@syncfusion/ej2-base';\n/**\n * FreezeRowModelGenerator is used to generate grid data rows with freeze row and column.\n * @hidden\n */\nvar FreezeRowModelGenerator = /** @class */ (function () {\n    function FreezeRowModelGenerator(parent) {\n        this.isFrzLoad = 1;\n        this.parent = parent;\n        this.rowModelGenerator = new RowModelGenerator(this.parent);\n    }\n    FreezeRowModelGenerator.prototype.generateRows = function (data, notifyArgs, virtualRows) {\n        var frzCols = this.parent.getFrozenColumns();\n        frzCols = frzCols && this.parent.isRowDragable() ? frzCols + 1 : frzCols;\n        if (this.isFrzLoad % 2 !== 0 && notifyArgs.requestType === 'virtualscroll' && notifyArgs.virtualInfo.sentinelInfo.axis === 'X') {\n            this.isFrzLoad++;\n            return null;\n        }\n        var row = this.parent.enableVirtualization ? virtualRows\n            : this.rowModelGenerator.generateRows(data, notifyArgs);\n        if (isBlazor() && !this.parent.isJsComponent) {\n            return row;\n        }\n        for (var i = 0, len = row.length; i < len; i++) {\n            if (this.isFrzLoad % 2 === 0) {\n                row[i].cells = row[i].cells.slice(frzCols, row[i].cells.length);\n            }\n            else {\n                row[i].isFreezeRow = true;\n                row[i].cells = row[i].cells.slice(0, frzCols);\n            }\n        }\n        this.isFrzLoad++;\n        return row;\n    };\n    return FreezeRowModelGenerator;\n}());\nexport { FreezeRowModelGenerator };\n"]},"metadata":{},"sourceType":"module"}